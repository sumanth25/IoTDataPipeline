package com.iotdatapipeline.shared.dto;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class AggregatedDataTest {

    private AggregatedData aggregatedData;

    @BeforeEach
    public void setup() {
        // Initialize a new AggregatedData object before each test
        aggregatedData = new AggregatedData();
    }

    @Test
    public void testSettersAndGetters() {
        // Set values using setters
        aggregatedData.setAvgValue(25.5);
        aggregatedData.setMinValue(20.0);
        aggregatedData.setMaxValue(30.0);
        aggregatedData.setUnit("°C");

        // Verify the values using getters
        assertEquals(25.5, aggregatedData.getAvgValue());
        assertEquals(20.0, aggregatedData.getMinValue());
        assertEquals(30.0, aggregatedData.getMaxValue());
        assertEquals("°C", aggregatedData.getUnit());
    }

    @Test
    public void testToString() {
        // Set values
        aggregatedData.setAvgValue(10.5);
        aggregatedData.setMinValue(5.0);
        aggregatedData.setMaxValue(15.0);
        aggregatedData.setUnit("m/s");

        // Expected toString format
        String expectedString = "AggregatedData(avgValue=10.5, minValue=5.0, maxValue=15.0, unit=m/s)";

        // Verify the toString method generated by Lombok
        assertEquals(expectedString, aggregatedData.toString());
    }

    @Test
    public void testEqualsAndHashCode() {
        // Create two AggregatedData objects with the same values
        AggregatedData aggregatedData1 = new AggregatedData();
        aggregatedData1.setAvgValue(30.0);
        aggregatedData1.setMinValue(25.0);
        aggregatedData1.setMaxValue(35.0);
        aggregatedData1.setUnit("m");

        AggregatedData aggregatedData2 = new AggregatedData();
        aggregatedData2.setAvgValue(30.0);
        aggregatedData2.setMinValue(25.0);
        aggregatedData2.setMaxValue(35.0);
        aggregatedData2.setUnit("m");

        // Verify that the objects are equal and have the same hashCode
        assertEquals(aggregatedData1, aggregatedData2);
        assertEquals(aggregatedData1.hashCode(), aggregatedData2.hashCode());
    }
}
