package com.iotdatapipeline.shared.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class DeviceTest {

    private Device device;

    @BeforeEach
    public void setup() {
        // Initialize a new Device object before each test
        device = new Device();
    }

    @Test
    public void testSettersAndGetters() {
        // Set values using setters
        device.setId("device_1");
        device.setDeviceType("sensor");
        device.setCreatedAt(System.currentTimeMillis());

        // Verify the values using getters
        assertEquals("device_1", device.getId());
        assertEquals("sensor", device.getDeviceType());
        assertTrue(device.getCreatedAt() > 0);  // Ensure that the createdAt timestamp is set
    }

    @Test
    public void testConstructor() {
        // Create an instance using the all-args constructor
        Device newDevice = new Device("device_2", "actuator", System.currentTimeMillis());

        // Verify that values are correctly set via the constructor
        assertEquals("device_2", newDevice.getId());
        assertEquals("actuator", newDevice.getDeviceType());
        assertTrue(newDevice.getCreatedAt() > 0);
    }

    @Test
    public void testToString() {
        // Set values
        device.setId("device_3");
        device.setDeviceType("temperature");
        device.setCreatedAt(System.currentTimeMillis());

        // Expected toString format
        String expectedString = "Device(id=device_3, deviceType=temperature, createdAt=" + device.getCreatedAt() + ")";

        // Verify the toString method generated by Lombok
        assertEquals(expectedString, device.toString());
    }

    @Test
    public void testEqualsAndHashCode() {
        // Create two Device objects with the same values
        Device device1 = new Device("device_4", "sensor", System.currentTimeMillis());
        Device device2 = new Device("device_4", "sensor", device1.getCreatedAt());

        // Verify that the objects are equal and have the same hashCode
        assertEquals(device1, device2);
        assertEquals(device1.hashCode(), device2.hashCode());

        // Modify one property to make the objects different
        device2.setDeviceType("actuator");

        // Verify they are not equal after modification
        assertNotEquals(device1, device2);
    }
}
